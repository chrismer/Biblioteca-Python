#!/usr/bin/env python3
"""
Script de inicializaci√≥n de la base de datos con datos de prueba
Ejecutar este script una vez para poblar la base de datos con datos iniciales
"""

import sys
import os
from datetime import date
from logic.library_manager import GestorBiblioteca

def inicializar_datos_prueba():
    """Inicializa la base de datos con datos de prueba."""
    print("üöÄ Inicializando base de datos con datos de prueba...")
    
    gestor = GestorBiblioteca()
    
    try:
        # 1. Crear estanter√≠as
        print("\nüìö Creando estanter√≠as...")
        estanterias = [
            ("Ficci√≥n", 20),
            ("No Ficci√≥n", 15),
            ("Ciencias", 25),
            ("Historia", 18),
            ("Literatura Cl√°sica", 30)
        ]
        
        estanteria_ids = {}
        for nombre, capacidad in estanterias:
            try:
                estanteria_id = gestor.agregar_estanteria(nombre, capacidad)
                estanteria_ids[nombre] = estanteria_id
                print(f"  ‚úÖ Estanter√≠a '{nombre}' creada (ID: {estanteria_id})")
            except Exception as e:
                print(f"  ‚ö†Ô∏è Estanter√≠a '{nombre}' ya existe o error: {e}")
                # Buscar la estanter√≠a existente
                estanterias_existentes = gestor.get_todas_estanterias()
                for est in estanterias_existentes:
                    if est.nombre == nombre:
                        estanteria_ids[nombre] = est.id
                        break
        
        # 2. Crear g√©neros
        print("\nüé≠ Creando g√©neros...")
        generos = [
            ("Realismo M√°gico", "Literatura que combina realidad con elementos fant√°sticos"),
            ("Ciencia Ficci√≥n", "Narrativa basada en avances cient√≠ficos y tecnol√≥gicos"),
            ("Ensayo", "Texto de reflexi√≥n sobre diversos temas"),
            ("Biograf√≠a", "Relato de la vida de una persona"),
            ("Historia", "Narrativa de hechos pasados"),
            ("Filosof√≠a", "Reflexi√≥n sobre la existencia y el conocimiento"),
            ("Romance", "Narrativa centrada en relaciones amorosas"),
            ("Thriller", "Narrativa de suspense y tensi√≥n")
        ]
        
        for nombre, descripcion in generos:
            try:
                genero_id = gestor.agregar_genero(nombre, descripcion)
                print(f"  ‚úÖ G√©nero '{nombre}' creado (ID: {genero_id})")
            except Exception as e:
                print(f"  ‚ö†Ô∏è G√©nero '{nombre}' ya existe o error: {e}")
        
        # 3. Crear usuarios
        print("\nüë• Creando usuarios...")
        usuarios = [
            ("Ana Garc√≠a", "ana.garcia@email.com", "555-0101", "Calle Principal 123"),
            ("Carlos L√≥pez", "carlos.lopez@email.com", "555-0102", "Av. Central 456"),
            ("Mar√≠a Rodr√≠guez", "maria.rodriguez@email.com", "555-0103", "Plaza Mayor 789"),
            ("Juan P√©rez", "juan.perez@email.com", "555-0104", "Barrio Norte 321"),
            ("Laura Mart√≠nez", "laura.martinez@email.com", "555-0105", "Zona Sur 654")
        ]
        
        for nombre, email, telefono, direccion in usuarios:
            try:
                usuario_id = gestor.agregar_usuario(nombre, email, telefono, direccion)
                print(f"  ‚úÖ Usuario '{nombre}' creado (ID: {usuario_id})")
            except Exception as e:
                print(f"  ‚ö†Ô∏è Usuario '{nombre}' ya existe o error: {e}")
        
        # 4. Crear libros con ejemplares
        print("\nüìñ Creando libros...")
        libros = [
            {
                "codigo": "LIB001",
                "titulo": "Cien A√±os de Soledad",
                "autor_nombre": "Gabriel",
                "autor_apellido": "Garc√≠a M√°rquez",
                "anio": 1967,
                "cantidad_ejemplares": 3,
                "estanteria": "Literatura Cl√°sica",
                "genero": "Realismo M√°gico",
                "isbn": "978-84-376-0494-7",
                "editorial": "Sudamericana"
            },
            {
                "codigo": "LIB002",
                "titulo": "1984",
                "autor_nombre": "George",
                "autor_apellido": "Orwell",
                "anio": 1949,
                "cantidad_ejemplares": 2,
                "estanteria": "Ficci√≥n",
                "genero": "Ciencia Ficci√≥n",
                "isbn": "978-84-376-0495-4",
                "editorial": "Planeta"
            },
            {
                "codigo": "LIB003",
                "titulo": "El Principito",
                "autor_nombre": "Antoine",
                "autor_apellido": "de Saint-Exup√©ry",
                "anio": 1943,
                "cantidad_ejemplares": 4,
                "estanteria": "Literatura Cl√°sica",
                "genero": "Filosof√≠a",
                "isbn": "978-84-376-0496-1",
                "editorial": "Salamandra"
            },
            {
                "codigo": "LIB004",
                "titulo": "Sapiens",
                "autor_nombre": "Yuval Noah",
                "autor_apellido": "Harari",
                "anio": 2011,
                "cantidad_ejemplares": 2,
                "estanteria": "No Ficci√≥n",
                "genero": "Historia",
                "isbn": "978-84-376-0497-8",
                "editorial": "Debate"
            },
            {
                "codigo": "LIB005",
                "titulo": "Don Quijote de la Mancha",
                "autor_nombre": "Miguel",
                "autor_apellido": "de Cervantes",
                "anio": 1605,
                "cantidad_ejemplares": 2,
                "estanteria": "Literatura Cl√°sica",
                "genero": "Literatura Cl√°sica",
                "isbn": "978-84-376-0498-5",
                "editorial": "C√°tedra"
            }
        ]
        
        for libro_data in libros:
            try:
                libro_id = gestor.agregar_libro_simple(
                    codigo=libro_data["codigo"],
                    titulo=libro_data["titulo"],
                    autor_nombre=libro_data["autor_nombre"],
                    autor_apellido=libro_data["autor_apellido"],
                    anio=libro_data["anio"],
                    cantidad_ejemplares=libro_data["cantidad_ejemplares"],
                    estanteria_id=estanteria_ids[libro_data["estanteria"]],
                    genero_nombre=libro_data["genero"],
                    isbn=libro_data["isbn"],
                    editorial=libro_data["editorial"]
                )
                print(f"  ‚úÖ Libro '{libro_data['titulo']}' creado con {libro_data['cantidad_ejemplares']} ejemplares (ID: {libro_id})")
            except Exception as e:
                print(f"  ‚ö†Ô∏è Libro '{libro_data['titulo']}' ya existe o error: {e}")
        
        # 5. Mostrar resumen final
        print("\nüìä RESUMEN DE LA INICIALIZACI√ìN")
        resumen = gestor.get_resumen_biblioteca()
        print(f"  üìö Total de libros: {resumen['total_libros']}")
        print(f"  üìñ Total de ejemplares: {resumen['total_ejemplares']}")
        print(f"  ‚úÖ Ejemplares disponibles: {resumen['ejemplares_disponibles']}")
        print(f"  üë• Usuarios registrados: {resumen['usuarios_activos']}")
        print(f"  üèóÔ∏è Estanter√≠as: {len(estanteria_ids)}")
        
        print("\nüéâ ¬°Inicializaci√≥n completada con √©xito!")
        print("   Ahora puedes ejecutar la aplicaci√≥n con: python main.py")
        
    except Exception as e:
        print(f"\n‚ùå Error durante la inicializaci√≥n: {e}")
        raise
    finally:
        gestor.cerrar()

def main():
    """Funci√≥n principal."""
    print("=" * 60)
    print("     üèõÔ∏è SISTEMA DE BIBLIOTECA - INICIALIZACI√ìN")
    print("=" * 60)
    
    # Verificar si ya existe la base de datos
    if os.path.exists("biblioteca.db"):
        respuesta = input("\n‚ö†Ô∏è La base de datos ya existe. ¬øDesea continuar? (s/N): ")
        if respuesta.lower() not in ['s', 'si', 's√≠', 'y', 'yes']:
            print("‚ùå Inicializaci√≥n cancelada.")
            return
    
    try:
        inicializar_datos_prueba()
    except KeyboardInterrupt:
        print("\n‚ùå Inicializaci√≥n interrumpida por el usuario.")
    except Exception as e:
        print(f"\n‚ùå Error cr√≠tico: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()
